generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String?
  email    String  @unique
  password String

  role UserRole @default(USER)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Session   Session[]
  Product   Product[]
}

model Session {
  id         String   @id
  validUntil DateTime

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  slug        String  @unique
  description String
  isPublic    Boolean @default(false)

  regularPrice  Int
  discountPrice Int?

  type ProductType @default(SINGLE)

  userId  Int
  addedBy User @relation(fields: [userId], references: [id])

  images       Image[] @relation("ProductImage")
  coverImageId Int?
  coverImage   Image?  @relation(name: "CoverImage", fields: [coverImageId], references: [id])

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  taxId         Int?
  tax           Tax?            @relation(name: "ProductTax", fields: [taxId], references: [id])
  CartToProduct CartToProduct[]
}

enum ProductType {
  SINGLE
  BUNDLE // @todo
}

model Cart {
  id String @id @default(cuid())

  cartProducts CartToProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model CartToProduct {

  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  quantity Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  @@id([cartId, productId])
}

model Order {
  id   String @id @default(uuid())
  cart Json

  total                 Int
  stripePaymentIntentId String? @unique

  // @todo add address

  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  ON_HOLD
  COMPLETED
  CANCELLED
  REFUNDED
  FAILED
}

model Image {
  id          Int      @id @default(autoincrement())
  width       Int
  height      Int
  path        String
  alt         String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  productId Int?
  product   Product? @relation(name: "ProductImage", fields: [productId], references: [id])

  Product Product[] @relation("CoverImage")
}

model Tax {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  taxRate   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  products  Product[] @relation("ProductTax")
}
