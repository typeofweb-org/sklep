/**
 * This file was auto-generated by swagger-to-ts.
 * Do not make direct changes to the file.
 */

export interface definitions {
  product: { id: number; name: string; slug: string; regularPrice: number; discountPrice?: number };
  Model1: { quantity: number; product: definitions['product'] };
  cartProducts: definitions['Model1'][];
  cart: {
    id: string;
    createdAt: string;
    updatedAt: string;
    regularSubTotal: number;
    discountSubTotal: number;
    totalQuantity: number;
    cartProducts: definitions['cartProducts'];
  };
  Model2: {
    id: string;
    cart: definitions['cart'];
    total: number;
    status:
      | 'PENDING'
      | 'PROCESSING'
      | 'ON_HOLD'
      | 'COMPLETED'
      | 'CANCELLED'
      | 'REFUNDED'
      | 'FAILED';
    createdAt: string;
    updatedAt: string;
  };
  data: definitions['Model2'][];
  meta: { total: number };
  Model3: { data: definitions['data']; meta: definitions['meta'] };
  Model4: {
    id: number;
    slug: string;
    name: string;
    description: string;
    isPublic: boolean;
    regularPrice: number;
    discountPrice?: number;
    type: 'SINGLE' | 'BUNDLE';
    coverImageId?: number;
  };
  Model5: definitions['Model4'][];
  Model6: { data: definitions['Model5']; meta: definitions['meta'] };
  Model7: { id: number; name: string; taxRate: number };
  Model8: definitions['Model7'][];
  Model9: { data: definitions['Model8'] };
  user: {
    id: number;
    name?: string;
    email: string;
    role: 'USER' | 'ADMIN';
    createdAt?: string;
    updatedAt?: string;
  };
  Model10: {
    id: string;
    validUntil: string;
    userId: number;
    createdAt?: string;
    updatedAt?: string;
    user: definitions['user'];
  };
  Model11: { data: definitions['Model10'] };
  Model12: definitions['cart'][];
  Model13: { data: definitions['Model12'] };
  Model14: {
    id: number;
    width: number;
    height: number;
    path: string;
    alt: string;
    description?: string;
    createdAt: string;
    updatedAt: string;
    productId?: number;
  };
  Model15: definitions['Model14'][];
  Model16: { data: definitions['Model15'] };
  Model17: (
    | 'PENDING'
    | 'PROCESSING'
    | 'ON_HOLD'
    | 'COMPLETED'
    | 'CANCELLED'
    | 'REFUNDED'
    | 'FAILED'
  )[];
  Model18: { data: definitions['Model17'] };
  Model19: {
    id: string;
    cart?: definitions['cart'];
    total: number;
    status:
      | 'PENDING'
      | 'PROCESSING'
      | 'ON_HOLD'
      | 'COMPLETED'
      | 'CANCELLED'
      | 'REFUNDED'
      | 'FAILED';
    createdAt: string;
    updatedAt: string;
  };
  Model20: { data: definitions['Model19'] };
  Model21: { data: definitions['Model4'] };
  Model22: { data: definitions['Model7'] };
  Model23: { data: definitions['cart'] };
  Model24: {
    name: string;
    description: string;
    isPublic: boolean;
    regularPrice: number;
    discountPrice?: number;
    type: 'SINGLE' | 'BUNDLE';
  };
  Model25: { name: string; taxRate: number };
  Model26: { email: string; password: string };
  Model27: { data: definitions['Model14'] };
  Model28: { productId: number; quantity: number };
  Model29: { productId: number };
  Model30: { orderId: string; stripeClientSecret: string };
  Model31: { data: definitions['Model30'] };
  Model32: {
    status:
      | 'PENDING'
      | 'PROCESSING'
      | 'ON_HOLD'
      | 'COMPLETED'
      | 'CANCELLED'
      | 'REFUNDED'
      | 'FAILED';
  };
  Model33: { alt: string; description?: string; productId?: number };
  Model34: { data?: definitions['Model14'] };

  getOrdersRequestQuery: {
    take?: number;
    skip?: number;
  };

  getOrders200Response: definitions['Model3'];
  getProductsRequestQuery: {
    take?: number;
    skip?: number;
  };

  getProducts200Response: definitions['Model6'];
  postProductsRequestBody: definitions['Model24'];

  postProducts200Response: definitions['Model21'];

  getTaxes200Response: definitions['Model9'];
  postTaxesRequestBody: definitions['Model25'];

  postTaxes200Response: definitions['Model22'];

  getAuthMe200Response: definitions['Model11'];

  getCartAll200Response: definitions['Model13'];

  getMediaImages200Response: definitions['Model16'];
  postMediaImagesRequestFormData: {
    file: {
      readonly path: string;
      readonly bytes: number;
      readonly filename: string;
      readonly headers: Record<string, string>;
    };
    alt: string;
    description?: string;
    productId?: number;
  };

  postMediaImages200Response: definitions['Model27'];

  getOrdersStatuses200Response: definitions['Model18'];
  getOrdersOrderIdRequestPathParams: {
    orderId: string;
  };

  getOrdersOrderId200Response: definitions['Model20'];
  putOrdersOrderIdRequestPathParams: {
    orderId: string;
  };
  putOrdersOrderIdRequestBody: definitions['Model32'];

  putOrdersOrderId200Response: definitions['Model20'];
  getProductsProductIdOrSlugRequestPathParams: {
    productIdOrSlug: number | string;
  };

  getProductsProductIdOrSlug200Response: definitions['Model21'];
  getTaxesTaxIdRequestPathParams: {
    taxId: number;
  };

  getTaxesTaxId200Response: definitions['Model22'];
  putTaxesTaxIdRequestPathParams: {
    taxId: number;
  };
  putTaxesTaxIdRequestBody: definitions['Model25'];

  putTaxesTaxId200Response: definitions['Model22'];
  deleteTaxesTaxIdRequestPathParams: {
    taxId: number;
  };

  deleteTaxesTaxIdDefaultResponse: string;

  postCart200Response: definitions['Model23'];
  postAuthLoginRequestBody: definitions['Model26'];

  postAuthLoginDefaultResponse: string;

  postAuthLogoutDefaultResponse: string;
  postAuthRegisterRequestBody: definitions['Model26'];

  postAuthRegisterDefaultResponse: string;

  postOrdersStripeWebhookDefaultResponse: string;
  patchCartAddRequestBody: definitions['Model28'];

  patchCartAddDefaultResponse: string;

  patchCartClearDefaultResponse: string;
  patchCartRemoveRequestBody: definitions['Model29'];

  patchCartRemoveDefaultResponse: string;
  patchCartSetRequestBody: definitions['Model28'];

  patchCartSetDefaultResponse: string;

  patchOrdersInitiateStripePayment200Response: definitions['Model31'];
  putProductsProductIdRequestPathParams: {
    productId: number;
  };
  putProductsProductIdRequestBody: definitions['Model24'];

  putProductsProductId200Response: definitions['Model21'];
  deleteProductsProductIdRequestPathParams: {
    productId: number;
  };

  deleteProductsProductIdDefaultResponse: string;
  putMediaImagesImageIdRequestPathParams: {
    imageId: number;
  };
  putMediaImagesImageIdRequestBody: definitions['Model33'];

  putMediaImagesImageId200Response: definitions['Model34'];
  deleteMediaImagesImageIdRequestPathParams: {
    imageId: number;
  };

  deleteMediaImagesImageIdDefaultResponse: string;

  pathsDefinitions: {
    '/orders': {
      GET: {
        requestQuery: {
          take?: number;
          skip?: number;
        };

        response: definitions['Model3'];
      };
    };
    '/products': {
      GET: {
        requestQuery: {
          take?: number;
          skip?: number;
        };

        response: definitions['Model6'];
      };
      POST: {
        requestBody: definitions['Model24'];

        response: definitions['Model21'];
      };
    };
    '/taxes': {
      GET: {
        response: definitions['Model9'];
      };
      POST: {
        requestBody: definitions['Model25'];

        response: definitions['Model22'];
      };
    };
    '/auth/me': {
      GET: {
        response: definitions['Model11'];
      };
    };
    '/cart/all': {
      GET: {
        response: definitions['Model13'];
      };
    };
    '/media/images': {
      GET: {
        response: definitions['Model16'];
      };
      POST: {
        requestFormData: {
          file: {
            readonly path: string;
            readonly bytes: number;
            readonly filename: string;
            readonly headers: Record<string, string>;
          };
          alt: string;
          description?: string;
          productId?: number;
        };

        response: definitions['Model27'];
      };
    };
    '/orders/statuses': {
      GET: {
        response: definitions['Model18'];
      };
    };
    '/orders/{orderId}': {
      GET: {
        requestPathParams: {
          orderId: string;
        };

        response: definitions['Model20'];
      };
      PUT: {
        requestPathParams: {
          orderId: string;
        };
        requestBody: definitions['Model32'];

        response: definitions['Model20'];
      };
    };
    '/products/{productIdOrSlug}': {
      GET: {
        requestPathParams: {
          productIdOrSlug: number | string;
        };

        response: definitions['Model21'];
      };
    };
    '/taxes/{taxId}': {
      GET: {
        requestPathParams: {
          taxId: number;
        };

        response: definitions['Model22'];
      };
      PUT: {
        requestPathParams: {
          taxId: number;
        };
        requestBody: definitions['Model25'];

        response: definitions['Model22'];
      };
      DELETE: {
        requestPathParams: {
          taxId: number;
        };

        response: string;
      };
    };
    '/cart': {
      POST: {
        response: definitions['Model23'];
      };
    };
    '/auth/login': {
      POST: {
        requestBody: definitions['Model26'];

        response: string;
      };
    };
    '/auth/logout': {
      POST: {
        response: string;
      };
    };
    '/auth/register': {
      POST: {
        requestBody: definitions['Model26'];

        response: string;
      };
    };
    '/orders/stripe/webhook': {
      POST: {
        response: string;
      };
    };
    '/cart/add': {
      PATCH: {
        requestBody: definitions['Model28'];

        response: string;
      };
    };
    '/cart/clear': {
      PATCH: {
        response: string;
      };
    };
    '/cart/remove': {
      PATCH: {
        requestBody: definitions['Model29'];

        response: string;
      };
    };
    '/cart/set': {
      PATCH: {
        requestBody: definitions['Model28'];

        response: string;
      };
    };
    '/orders/initiate-stripe-payment': {
      PATCH: {
        response: definitions['Model31'];
      };
    };
    '/products/{productId}': {
      PUT: {
        requestPathParams: {
          productId: number;
        };
        requestBody: definitions['Model24'];

        response: definitions['Model21'];
      };
      DELETE: {
        requestPathParams: {
          productId: number;
        };

        response: string;
      };
    };
    '/media/images/{imageId}': {
      PUT: {
        requestPathParams: {
          imageId: number;
        };
        requestBody: definitions['Model33'];

        response: definitions['Model34'];
      };
      DELETE: {
        requestPathParams: {
          imageId: number;
        };

        response: string;
      };
    };
  };
}
